// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: pull-service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PullerClient is the client API for Puller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PullerClient interface {
	PullResource(ctx context.Context, in *HttpRequestWrapper, opts ...grpc.CallOption) (*ZippedResponses, error)
}

type pullerClient struct {
	cc grpc.ClientConnInterface
}

func NewPullerClient(cc grpc.ClientConnInterface) PullerClient {
	return &pullerClient{cc}
}

func (c *pullerClient) PullResource(ctx context.Context, in *HttpRequestWrapper, opts ...grpc.CallOption) (*ZippedResponses, error) {
	out := new(ZippedResponses)
	err := c.cc.Invoke(ctx, "/pull.Puller/PullResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PullerServer is the server API for Puller service.
// All implementations must embed UnimplementedPullerServer
// for forward compatibility
type PullerServer interface {
	PullResource(context.Context, *HttpRequestWrapper) (*ZippedResponses, error)
	mustEmbedUnimplementedPullerServer()
}

// UnimplementedPullerServer must be embedded to have forward compatible implementations.
type UnimplementedPullerServer struct {
}

func (UnimplementedPullerServer) PullResource(context.Context, *HttpRequestWrapper) (*ZippedResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullResource not implemented")
}
func (UnimplementedPullerServer) mustEmbedUnimplementedPullerServer() {}

// UnsafePullerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PullerServer will
// result in compilation errors.
type UnsafePullerServer interface {
	mustEmbedUnimplementedPullerServer()
}

func RegisterPullerServer(s grpc.ServiceRegistrar, srv PullerServer) {
	s.RegisterService(&Puller_ServiceDesc, srv)
}

func _Puller_PullResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HttpRequestWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PullerServer).PullResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pull.Puller/PullResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PullerServer).PullResource(ctx, req.(*HttpRequestWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

// Puller_ServiceDesc is the grpc.ServiceDesc for Puller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Puller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pull.Puller",
	HandlerType: (*PullerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PullResource",
			Handler:    _Puller_PullResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pull-service.proto",
}
