// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: pull-service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PullerClient is the client API for Puller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PullerClient interface {
	PullResources(ctx context.Context, in *HttpRequests, opts ...grpc.CallOption) (Puller_PullResourcesClient, error)
}

type pullerClient struct {
	cc grpc.ClientConnInterface
}

func NewPullerClient(cc grpc.ClientConnInterface) PullerClient {
	return &pullerClient{cc}
}

func (c *pullerClient) PullResources(ctx context.Context, in *HttpRequests, opts ...grpc.CallOption) (Puller_PullResourcesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Puller_ServiceDesc.Streams[0], "/pull.Puller/PullResources", opts...)
	if err != nil {
		return nil, err
	}
	x := &pullerPullResourcesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Puller_PullResourcesClient interface {
	Recv() (*HttpResponse, error)
	grpc.ClientStream
}

type pullerPullResourcesClient struct {
	grpc.ClientStream
}

func (x *pullerPullResourcesClient) Recv() (*HttpResponse, error) {
	m := new(HttpResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PullerServer is the server API for Puller service.
// All implementations must embed UnimplementedPullerServer
// for forward compatibility
type PullerServer interface {
	PullResources(*HttpRequests, Puller_PullResourcesServer) error
	mustEmbedUnimplementedPullerServer()
}

// UnimplementedPullerServer must be embedded to have forward compatible implementations.
type UnimplementedPullerServer struct {
}

func (UnimplementedPullerServer) PullResources(*HttpRequests, Puller_PullResourcesServer) error {
	return status.Errorf(codes.Unimplemented, "method PullResources not implemented")
}
func (UnimplementedPullerServer) mustEmbedUnimplementedPullerServer() {}

// UnsafePullerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PullerServer will
// result in compilation errors.
type UnsafePullerServer interface {
	mustEmbedUnimplementedPullerServer()
}

func RegisterPullerServer(s grpc.ServiceRegistrar, srv PullerServer) {
	s.RegisterService(&Puller_ServiceDesc, srv)
}

func _Puller_PullResources_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HttpRequests)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PullerServer).PullResources(m, &pullerPullResourcesServer{stream})
}

type Puller_PullResourcesServer interface {
	Send(*HttpResponse) error
	grpc.ServerStream
}

type pullerPullResourcesServer struct {
	grpc.ServerStream
}

func (x *pullerPullResourcesServer) Send(m *HttpResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Puller_ServiceDesc is the grpc.ServiceDesc for Puller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Puller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pull.Puller",
	HandlerType: (*PullerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullResources",
			Handler:       _Puller_PullResources_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pull-service.proto",
}
